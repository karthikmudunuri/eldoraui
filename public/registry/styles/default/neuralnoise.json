{
  "name": "neuralnoise",
  "type": "registry:ui",
  "files": [
    {
      "path": "eldoraui/neuralnoise.tsx",
      "content": "\"use client\";\n\nimport Link from 'next/link';\nimport { useEffect, useRef } from 'react';\n\n// Shader code\nconst vertexShader = `\n    precision mediump float;\n    varying vec2 vUv;\n    attribute vec2 a_position;\n    void main() {\n        vUv = .5 * (a_position + 1.);\n        gl_Position = vec4(a_position, 0.0, 1.0);\n    }\n`;\n\nconst fragmentShader = `\n    precision mediump float;\n    varying vec2 vUv;\n    uniform float u_time;\n    uniform float u_ratio;\n    uniform vec2 u_pointer_position;\n    uniform float u_scroll_progress;\n\n    vec2 rotate(vec2 uv, float th) {\n        return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n    }\n\n    float neuro_shape(vec2 uv, float t, float p) {\n        vec2 sine_acc = vec2(0.);\n        vec2 res = vec2(0.);\n        float scale = 8.;\n\n        for (int j = 0; j < 15; j++) {\n            uv = rotate(uv, 1.);\n            sine_acc = rotate(sine_acc, 1.);\n            vec2 layer = uv * scale + float(j) + sine_acc - t;\n            sine_acc += sin(layer);\n            res += (.5 + .5 * cos(layer)) / scale;\n            scale *= (1.2 - .07 * p);\n        }\n        return res.x + res.y;\n    }\n\n    void main() {\n        vec2 uv = .5 * vUv;\n        uv.x *= u_ratio;\n\n        vec2 pointer = vUv - u_pointer_position;\n        pointer.x *= u_ratio;\n        float p = clamp(length(pointer), 0., 1.);\n        p = .5 * pow(1. - p, 2.);\n\n        float t = .001 * u_time;\n        vec3 color = vec3(0.);\n\n        float noise = neuro_shape(uv, t, p);\n\n        noise = 1.2 * pow(noise, 3.);\n        noise += pow(noise, 10.);\n        noise = max(.0, noise - .5);\n        noise *= (1. - length(vUv - .5));\n\n        color = normalize(vec3(.2, .5 + .4 * cos(3. * u_scroll_progress), .5 + .5 * sin(3. * u_scroll_progress)));\n\n        color = color * noise;\n\n        gl_FragColor = vec4(color, noise);\n    }\n`;\n\nconst NeuralNoise = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const uniformsRef = useRef<Record<string, WebGLUniformLocation | null>>({});\n  const pointerRef = useRef({ x: 0, y: 0, tX: 0, tY: 0 });\n  const glRef = useRef<WebGLRenderingContext | null>(null);\n  \n  const devicePixelRatio = typeof window !== 'undefined' \n    ? Math.min(window.devicePixelRatio, 2) \n    : 1;\n\n  const initShader = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const gl = canvas.getContext('webgl') as WebGLRenderingContext || canvas.getContext('experimental-webgl') as WebGLRenderingContext;\n    if (!gl) {\n      console.error('WebGL is not supported by your browser.');\n      return;\n    }\n\n    const createShader = (sourceCode: string, type: number) => {\n      const shader = gl.createShader(type);\n      if (!shader) return null;\n      \n      gl.shaderSource(shader, sourceCode);\n      gl.compileShader(shader);\n\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error('Shader compilation error:', gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n        return null;\n      }\n\n      return shader;\n    };\n\n    const vShader = createShader(vertexShader, gl.VERTEX_SHADER);\n    const fShader = createShader(fragmentShader, gl.FRAGMENT_SHADER);\n\n    if (!vShader || !fShader) return;\n\n    const program = gl.createProgram();\n    if (!program) return;\n\n    gl.attachShader(program, vShader);\n    gl.attachShader(program, fShader);\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      console.error('Program linking error:', gl.getProgramInfoLog(program));\n      return;\n    }\n\n    const uniforms: Record<string, WebGLUniformLocation | null> = {};\n    const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    \n    for (let i = 0; i < uniformCount; i++) {\n      const uniformInfo = gl.getActiveUniform(program, i);\n      if (uniformInfo) {\n        uniforms[uniformInfo.name] = gl.getUniformLocation(program, uniformInfo.name);\n      }\n    }\n\n    uniformsRef.current = uniforms;\n\n    const vertices = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);\n    const vertexBuffer = gl.createBuffer();\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    gl.useProgram(program);\n\n    const positionLocation = gl.getAttribLocation(program, 'a_position');\n    gl.enableVertexAttribArray(positionLocation);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\n    glRef.current = gl;\n  };\n\n  const render = () => {\n    const gl = glRef.current;\n    const uniforms = uniformsRef.current;\n    if (!gl || !uniforms) return;\n\n    const currentTime = performance.now();\n    const pointer = pointerRef.current;\n\n    pointer.x += (pointer.tX - pointer.x) * 0.5;\n    pointer.y += (pointer.tY - pointer.y) * 0.5;\n\n    gl.uniform1f(uniforms.u_time, currentTime);\n    gl.uniform2f(\n      uniforms.u_pointer_position,\n      pointer.x / window.innerWidth,\n      1 - pointer.y / window.innerHeight\n    );\n    gl.uniform1f(\n      uniforms.u_scroll_progress,\n      window.pageYOffset / (2 * window.innerHeight)\n    );\n\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    requestAnimationFrame(render);\n  };\n\n  const resizeCanvas = () => {\n    const canvas = canvasRef.current;\n    const gl = glRef.current;\n    const uniforms = uniformsRef.current;\n    \n    if (!canvas || !gl || !uniforms) return;\n\n    canvas.width = window.innerWidth * devicePixelRatio;\n    canvas.height = window.innerHeight * devicePixelRatio;\n    \n    gl.uniform1f(uniforms.u_ratio, canvas.width / canvas.height);\n    gl.viewport(0, 0, canvas.width, canvas.height);\n  };\n\n  const updateMousePosition = (eX: number, eY: number) => {\n    pointerRef.current.tX = eX;\n    pointerRef.current.tY = eY;\n  };\n\n  useEffect(() => {\n    initShader();\n    resizeCanvas();\n    render();\n\n    const handleResize = () => resizeCanvas();\n    const handlePointerMove = (e: PointerEvent) => updateMousePosition(e.clientX, e.clientY);\n    const handleTouchMove = (e: TouchEvent) => {\n      updateMousePosition(e.targetTouches[0].clientX, e.targetTouches[0].clientY);\n    };\n    const handleClick = (e: MouseEvent) => updateMousePosition(e.clientX, e.clientY);\n\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('pointermove', handlePointerMove);\n    window.addEventListener('touchmove', handleTouchMove);\n    window.addEventListener('click', handleClick);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('pointermove', handlePointerMove);\n      window.removeEventListener('touchmove', handleTouchMove);\n      window.removeEventListener('click', handleClick);\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"w-screen font-serif\">\n        <section className=\"xs:text-[30px] flex h-screen w-full items-center justify-center text-center text-[20vh] text-[#FFF6F7] sm:text-[25vw]\">\n          <div className=\"w-[90%]\">\n            Neural Noise ðŸ§ \n          </div>\n        </section>\n        \n        <section className=\"flex h-screen w-full items-center justify-center text-center text-[10vh] text-[#FFF6F7] md:text-[9vw]\">\n          <div className=\"w-[90%] max-w-[800px]\">\n            GLSL shader based on{' '}\n            <Link \n              href=\"https://x.com/zozuar/\" \n              target=\"_blank\"\n              className=\"inline-block transition-colors hover:text-[rgb(160,160,255)] active:text-[rgb(160,255,255)]\"\n            >\n              @zozuar\n            </Link>{' '}\n            <Link \n              href=\"https://x.com/zozuar/status/1625182758745128981/\" \n              target=\"_blank\"\n              className=\"inline-block transition-colors hover:text-[rgb(160,160,255)] active:text-[rgb(160,255,255)]\"\n            >\n              artwork\n            </Link>\n          </div>\n        </section>\n        \n        <section className=\"flex h-screen w-full items-center justify-center text-center text-[8vh] text-[#FFF6F7] md:text-[9vw]\">\n          <div className=\"w-[90%] max-w-[900px]\">\n            <Link \n              href=\"https://linkedin.com/in/ksenia-kondrashova/\" \n              target=\"_blank\"\n              className=\"inline-block px-[0.3em] transition-colors hover:text-[rgb(160,160,255)] active:text-[rgb(160,255,255)]\"\n            >\n              linkedIn\n            </Link>\n            <Link \n              href=\"https://codepen.io/ksenia-k\" \n              target=\"_blank\"\n              className=\"inline-block px-[0.3em] transition-colors hover:text-[rgb(160,160,255)] active:text-[rgb(160,255,255)]\"\n            >\n              codepen\n            </Link>\n            <Link \n              href=\"https://x.com/uuuuuulala\" \n              target=\"_blank\"\n              className=\"inline-block px-[0.3em] transition-colors hover:text-[rgb(160,160,255)] active:text-[rgb(160,255,255)]\"\n            >\n              X (twitter)\n            </Link>\n          </div>\n        </section>\n      </div>\n      <canvas\n        ref={canvasRef}\n        id=\"neuro\"\n        className=\"pointer-events-none fixed left-0 top-0 w-full opacity-95\"\n      />\n    </>\n  );\n};\n\nexport default NeuralNoise;",
      "type": "registry:ui",
      "target": ""
    }
  ]
}