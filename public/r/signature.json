{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "signature",
  "type": "registry:ui",
  "title": "signature",
  "description": "Component through which we can have digital signatures.",
  "dependencies": [
    "@uiw/react-signature",
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/eldoraui/signature.tsx",
      "content": "\"use client\";\nimport Signature, { type SignatureRef } from \"@uiw/react-signature\";\nimport {\n  CheckIcon,\n  CopyIcon,\n  DownloadIcon,\n  Eraser,\n  RefreshCcwIcon,\n} from \"lucide-react\";\nimport { type ComponentProps, useRef, useState } from \"react\";\nimport { useCopyToClipboard } from \"@/registry/hooks/copytoclipboard\";\nimport { cn } from \"@/lib/utils\";\n\nexport function ReactSignature({\n  className,\n  ...props\n}: ComponentProps<typeof Signature>) {\n  const [readonly, setReadonly] = useState(false);\n  const $svg = useRef<SignatureRef>(null);\n\n  const handleClear = () => $svg.current?.clear();\n\n  const handleValidate = () => {\n    if (readonly) {\n      $svg.current?.clear();\n      setReadonly(false);\n    } else {\n      setReadonly(true);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <p className=\"text-sm tracking-tight text-neutral-500\">Just sign here</p>\n      <Signature\n        className={cn(\n          \"h-28 w-80 rounded-lg border border-neutral-500/20 bg-neutral-500/10\",\n          readonly\n            ? \"cursor-not-allowed fill-neutral-500\"\n            : \"fill-neutral-800 dark:fill-neutral-200\",\n          className,\n        )}\n        options={{\n          smoothing: 0,\n          streamline: 0.8,\n          thinning: 0.7,\n        }}\n        readonly={readonly}\n        {...props}\n        ref={$svg}\n      />\n      <div className=\"flex justify-end gap-1 text-neutral-700 dark:text-neutral-200\">\n        <ValidateButton onClick={handleValidate} readonly={readonly} />\n        {readonly && (\n          <>\n            <DownloadButton svgElement={$svg.current?.svg} />\n            <CopySvgButton svgElement={$svg.current?.svg} />\n          </>\n        )}\n        {!readonly && <ClearButton onClick={handleClear} />}\n      </div>\n    </div>\n  );\n}\n\nfunction prepareSvgElement(svgElement: SVGSVGElement) {\n  const svgelm = svgElement.cloneNode(true) as SVGSVGElement;\n  const clientWidth = svgElement.clientWidth;\n  const clientHeight = svgElement.clientHeight;\n  svgelm.removeAttribute(\"style\");\n  svgelm.setAttribute(\"width\", `${clientWidth}px`);\n  svgelm.setAttribute(\"height\", `${clientHeight}px`);\n  svgelm.setAttribute(\"viewBox\", `0 0 ${clientWidth} ${clientHeight}`);\n  return { svgelm, clientWidth, clientHeight };\n}\n\nfunction ValidateButton({\n  readonly,\n  onClick,\n}: Readonly<{\n  readonly: boolean;\n  onClick: () => void;\n}>) {\n  return (\n    <button\n      className=\"inline-grid size-8 place-content-center rounded-md border border-neutral-500/10 bg-neutral-500/10 hover:bg-neutral-500/20\"\n      onClick={onClick}\n      type=\"button\"\n    >\n      {readonly ? (\n        <>\n          <RefreshCcwIcon className=\"size-5\" />\n          <span className=\"sr-only\">Reset</span>\n        </>\n      ) : (\n        <>\n          <CheckIcon className=\"size-5\" />\n          <span className=\"sr-only\">Validate</span>\n        </>\n      )}\n    </button>\n  );\n}\n\nfunction DownloadButton({\n  svgElement,\n}: Readonly<{\n  svgElement: SVGSVGElement | undefined | null;\n}>) {\n  const handleDownloadImage = () => {\n    if (!svgElement) {\n      return;\n    }\n\n    const { svgelm, clientWidth, clientHeight } = prepareSvgElement(svgElement);\n\n    const data = new XMLSerializer().serializeToString(svgelm);\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const img = new Image();\n    img.onload = () => {\n      canvas.width = clientWidth ?? 0;\n      canvas.height = clientHeight ?? 0;\n      ctx?.drawImage(img, 0, 0);\n      const a = document.createElement(\"a\");\n      a.download = \"signature.png\";\n      a.href = canvas.toDataURL(\"image/png\");\n      a.click();\n    };\n    img.src = `data:image/svg+xml;base64,${window.btoa(\n      decodeURIComponent(encodeURIComponent(data)),\n    )}`;\n  };\n\n  return (\n    <button\n      className=\"inline-grid size-8 place-content-center rounded-md border border-neutral-500/10 bg-neutral-500/10 hover:bg-neutral-500/20\"\n      onClick={handleDownloadImage}\n      type=\"button\"\n    >\n      <DownloadIcon className=\"size-5\" />\n      <span className=\"sr-only\">Download</span>\n    </button>\n  );\n}\n\nfunction CopySvgButton({\n  svgElement,\n}: Readonly<{\n  svgElement: SVGSVGElement | undefined | null;\n}>) {\n  const [_, copyText, isCopied] = useCopyToClipboard();\n\n  const handleCopySvg = () => {\n    if (!svgElement) {\n      return;\n    }\n\n    const { svgelm } = prepareSvgElement(svgElement);\n    copyText(svgelm.outerHTML);\n  };\n\n  return (\n    <button\n      className=\"inline-flex items-center gap-1 rounded-md border border-neutral-500/10 bg-neutral-500/10 px-1 text-sm tracking-tight hover:bg-neutral-500/20\"\n      onClick={handleCopySvg}\n      type=\"button\"\n    >\n      {isCopied ? (\n        <>\n          <span>Copied</span>\n          <CheckIcon className=\"size-5\" />\n        </>\n      ) : (\n        <>\n          <span>Copy to SVG</span>\n          <CopyIcon className=\"size-5\" />\n        </>\n      )}\n    </button>\n  );\n}\n\nfunction ClearButton({ onClick }: Readonly<{ onClick: () => void }>) {\n  return (\n    <button\n      className=\"inline-grid size-8 place-content-center rounded-md border border-neutral-500/10 bg-neutral-500/10 hover:bg-neutral-500/20\"\n      onClick={onClick}\n      type=\"button\"\n    >\n      <Eraser className=\"size-5\" />\n      <span className=\"sr-only\">Clear</span>\n    </button>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/eldoraui/signature.tsx"
    }
  ]
}