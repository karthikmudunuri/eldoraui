{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scaleslider",
  "type": "registry:ui",
  "title": "scaleslider",
  "description": "Animate numbers to count up or down to a target number",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/eldoraui/scaleslider.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport {\n  motion,\n  useSpring,\n  useMotionValue,\n  useTransform,\n  MotionValue,\n} from \"framer-motion\";\n\ninterface ScaleSliderProps {\n  defaultValue?: number;\n  minValue?: number;\n  maxValue?: number;\n  damping?: number;\n  stiffness?: number;\n}\n\nconst AnimatedValue = ({\n  value,\n  progress,\n  minValue,\n  maxValue,\n}: {\n  value: number;\n  progress: MotionValue<number>;\n  minValue: number;\n  maxValue: number;\n}) => {\n  const previousValue = useRef(value);\n  const direction = value > previousValue.current ? 1 : -1;\n  const isFirstRender = useRef(true);\n\n  useEffect(() => {\n    previousValue.current = value;\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    }\n  }, [value]);\n\n  return (\n    <div className=\"flex\">\n      <motion.div\n        key={value}\n        initial={\n          isFirstRender.current ? false : { y: direction * 15, opacity: 0 }\n        }\n        animate={{ y: 0, opacity: 1 }}\n        exit={{ y: -direction * 15, opacity: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"w-full text-right\"\n      >\n        {value}\n      </motion.div>\n      <span className=\"pl-1\"> / {maxValue}</span>\n    </div>\n  );\n};\n\nconst ScaleSlider: React.FC<ScaleSliderProps> = ({\n  defaultValue = 6,\n  minValue = 1,\n  maxValue = 10,\n  damping = 20,\n  stiffness = 300,\n}) => {\n  const [currentValue, setCurrentValue] = useState(defaultValue);\n  const range = maxValue - minValue;\n  const notchSize = 100 / range;\n\n  const x = useMotionValue(((defaultValue - minValue) / range) * 100);\n  const xSpring = useSpring(x, { damping, stiffness });\n  const width = useTransform(xSpring, [0, 100], [\"0%\", \"100%\"]);\n\n  const progress = useTransform(x, (latest) => {\n    return (latest % notchSize) / notchSize;\n  });\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = parseFloat(e.target.value);\n    x.set(newValue);\n  };\n\n  const handleDragEnd = () => {\n    const closestNotch = Math.round(x.get() / notchSize) * notchSize;\n    x.set(closestNotch);\n  };\n\n  useEffect(() => {\n    const unsubscribe = x.onChange((latest) => {\n      const newValue = Math.round((latest / 100) * range) + minValue;\n      if (newValue !== currentValue) {\n        setCurrentValue(newValue);\n      }\n    });\n\n    return () => unsubscribe();\n  }, [x, notchSize, currentValue, range, minValue]);\n\n  return (\n    <div className=\"mx-auto mt-8 w-full max-w-md\">\n      <div className=\"relative flex h-12 items-center gap-3 rounded-full bg-black pl-4 pr-6 dark:bg-white\">\n        {/* Value Indicator */}\n        <div className=\"relative flex h-6 w-12 items-center justify-center whitespace-nowrap text-sm font-semibold text-white dark:text-black\">\n          <AnimatedValue\n            value={currentValue}\n            progress={progress}\n            minValue={minValue}\n            maxValue={maxValue}\n          />\n        </div>\n        <div className=\"relative h-1/3 w-full\">\n          {/* Gray background with notches */}\n          <div className=\"absolute inset-0 rounded-full bg-neutral-800 dark:bg-neutral-300\">\n            <div className=\"absolute inset-0 flex items-center justify-between px-1\">\n              {[...Array(range + 1)].map((_, i) => (\n                <div\n                  key={i}\n                  className=\"dark: h-2 w-2 rounded-full bg-neutral-400\"\n                ></div>\n              ))}\n            </div>\n          </div>\n\n          {/* Slider */}\n          <motion.div\n            className=\"absolute inset-y-0 left-0 z-10 rounded-l-full bg-white dark:bg-black\"\n            style={{ width }}\n          >\n            {/* Thumb */}\n            <motion.div className=\"absolute right-0 top-1/2 h-6 w-6 -translate-y-1/2 translate-x-1/2 rounded-full border-2 border-neutral-800 bg-white shadow-md dark:border-neutral-300 dark:bg-black\" />\n          </motion.div>\n\n          {/* Slider input */}\n          <input\n            type=\"range\"\n            min=\"-3\"\n            max=\"103\"\n            value={x.get()}\n            onChange={handleChange}\n            onPointerUp={handleDragEnd}\n            className=\"absolute -inset-x-3 inset-y-0 z-20 w-[calc(100%+1.5rem)] cursor-pointer opacity-0\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ScaleSlider;\n",
      "type": "registry:ui",
      "target": "components/eldoraui/scaleslider.tsx"
    }
  ]
}